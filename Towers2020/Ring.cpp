/**
 * \file Ring.cpp
 *
 * \author Craig Smith
 *
 * Class that implements the Ring generated by TowerRing
 */

#include "pch.h"
#include "Ring.h"
#include "TowerRing.h"
#include "BalloonCollector.h"
#include <vector>

using namespace Gdiplus;
using namespace std;

CRing::CRing(CGame* game) : CItem(game)
{
	mXInit = mX;
	mYInit = mY;
}

void CRing::Update(double elapsed)
{
	if (mActive)
	{
		if (mDiameter < mDiameterMax)
		{
			mDiameter += elapsed * mFireRate;
			mX -= elapsed * mFireRate/2.35;
			mY -= elapsed * mFireRate/2.35;
			// Find all balloons within the range of the ring
			CBalloonCollector bc;
			CItem::GetGame()->Accept(&bc);
			vector<CBalloon*> balloons = bc.GetBalloons();
			for (auto balloon : balloons)
			{
				double dx = balloon->GetX() + 32 - GetX() + (mDiameter/2);
				double dy = (GetY() + (mDiameter/2)) - balloon->GetY() + 32;
				double distance = sqrt( (dx * dx) + (dy * dy));
				if (distance < mDiameter/2)
				{
					CItem::GetGame()->TakeBalloon(balloon);
				}
			}
		}
		else 
		{
			mDiameter = mDiameterInitial;
			mX = mXInit;
			mY = mYInit;
			mActive = false;
		}
	}
}

void CRing::Draw(Gdiplus::Graphics* graphics)
{
	Pen pen(Color(255, 0, 0), 2);
	graphics->DrawEllipse(&pen, mX, mY, mDiameter, mDiameter);
}
